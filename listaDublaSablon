
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct {
    int id;
    char* nume;
    float salariu;
    double bonus;
} Angajat;

typedef struct Nod {
    Angajat info;
    struct Nod* prev;
    struct Nod* next;
} Nod;

// Inserare la inceput
Nod* inserareInceput(Nod* cap, Angajat a) {
    Nod* nou = (Nod*)malloc(sizeof(Nod));
    nou->info.id = a.id;
    nou->info.salariu = a.salariu;
    nou->info.bonus = a.bonus;
    nou->info.nume = (char*)malloc(strlen(a.nume) + 1);
    strcpy(nou->info.nume, a.nume);
    nou->prev = NULL;
    nou->next = cap;
    if (cap != NULL)
        cap->prev = nou;
    return nou;
}

// Inserare la final
Nod* inserareFinal(Nod* cap, Angajat a) {
    Nod* nou = (Nod*)malloc(sizeof(Nod));
    nou->info.id = a.id;
    nou->info.salariu = a.salariu;
    nou->info.bonus = a.bonus;
    nou->info.nume = (char*)malloc(strlen(a.nume) + 1);
    strcpy(nou->info.nume, a.nume);
    nou->next = NULL;
    if (!cap) {
        nou->prev = NULL;
        return nou;
    }
    Nod* temp = cap;
    while (temp->next)
        temp = temp->next;
    temp->next = nou;
    nou->prev = temp;
    return cap;
}

// Afisare de la inceput
void afisareLista(Nod* cap) {
    while (cap) {
        printf("Id: %d, Nume: %s, Salariu: %.2f, Bonus: %.2lf\n",
               cap->info.id, cap->info.nume, cap->info.salariu, cap->info.bonus);
        cap = cap->next;
    }
}

// Afisare invers (de la coada)
void afisareInversa(Nod* cap) {
    if (!cap) return;
    while (cap->next)
        cap = cap->next;
    while (cap) {
        printf("Id: %d, Nume: %s, Salariu: %.2f, Bonus: %.2lf\n",
               cap->info.id, cap->info.nume, cap->info.salariu, cap->info.bonus);
        cap = cap->prev;
    }
}

// Stergere dupa ID
Nod* stergereDupaId(Nod* cap, int id) {
    Nod* temp = cap;
    while (temp && temp->info.id != id)
        temp = temp->next;
    if (!temp) return cap;
    if (temp->prev)
        temp->prev->next = temp->next;
    else
        cap = temp->next;
    if (temp->next)
        temp->next->prev = temp->prev;
    free(temp->info.nume);
    free(temp);
    return cap;
}

// Conversie in vector
void conversieInVector(Nod* cap, Angajat* v, int* n) {
    while (cap) {
        v[*n] = cap->info;
        (*n)++;
        cap = cap->next;
    }
}

// Filtrare dupa salariu
void extrageFiltru(Nod* cap, Angajat* v, int* n, float prag) {
    while (cap) {
        if (cap->info.salariu > prag) {
            v[*n] = cap->info;
            (*n)++;
        }
        cap = cap->next;
    }
}

// Citire din fisier
Nod* citireDinFisier(const char* numeFisier) {
    FILE* f = fopen(numeFisier, "r");
    if (!f) return NULL;
    Nod* cap = NULL;
    Angajat a;
    char buffer[100];
    while (fscanf(f, "%d %s %f %lf", &a.id, buffer, &a.salariu, &a.bonus) == 4) {
        a.nume = (char*)malloc(strlen(buffer) + 1);
        strcpy(a.nume, buffer);
        cap = inserareFinal(cap, a);
        free(a.nume);
    }
    fclose(f);
    return cap;
}

// Salvare in fisier
void salvareInFisier(Nod* cap, const char* numeFisier) {
    FILE* f = fopen(numeFisier, "w");
    if (!f) return;
    while (cap) {
        fprintf(f, "%d %s %.2f %.2lf\n", cap->info.id, cap->info.nume,
                cap->info.salariu, cap->info.bonus);
        cap = cap->next;
    }
    fclose(f);
}

// Dezalocare
void dezalocare(Nod* cap) {
    while (cap) {
        Nod* aux = cap;
        cap = cap->next;
        free(aux->info.nume);
        free(aux);
    }
}

// Main pentru testare
int main() {
    Nod* cap = NULL;
    Angajat a1 = {1, "Beatrice", 9600.0f, 700.87};
    Angajat a2 = {2, "Cosmin", 16000.9f, 10000.0};
    cap = inserareInceput(cap, a1);
    cap = inserareFinal(cap, a2);

    printf("Lista:\n");
    afisareLista(cap);

    printf("\nInversa:\n");
    afisareInversa(cap);

    salvareInFisier(cap, "angajatiDublaOut.txt");

    dezalocare(cap);
    cap = citireDinFisier("angajatiDublaOut.txt");
    printf("\nCitita din fisier:\n");
    afisareLista(cap);

    dezalocare(cap);
    return 0;
}
